"""add models app

Revision ID: ccde164fccb0
Revises: 
Create Date: 2025-08-01 11:16:59.715021

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'ccde164fccb0'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('coachs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('first_name', sa.String(length=150), nullable=True),
    sa.Column('last_name', sa.String(length=150), nullable=True),
    sa.Column('dni', sa.String(length=30), nullable=True),
    sa.Column('photo_url', sa.String(length=500), nullable=True),
    sa.Column('birth_date', sa.Date(), nullable=True),
    sa.Column('created_datetime', sa.DateTime(), nullable=True),
    sa.Column('updated_datetime', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_coachs_dni'), 'coachs', ['dni'], unique=True)
    op.create_index(op.f('ix_coachs_id'), 'coachs', ['id'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(), nullable=True),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('dni', sa.String(), nullable=True),
    sa.Column('first_name', sa.String(), nullable=True),
    sa.Column('last_name', sa.String(), nullable=True),
    sa.Column('password', sa.String(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('role', postgresql.ENUM('ADMIN', 'COACH', 'PLAYER', 'GUEST', 'CONFIGURATOR', name='roleuserenum'), nullable=True),
    sa.Column('created_datetime', sa.DateTime(), nullable=True),
    sa.Column('updated_datetime', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_dni'), 'users', ['dni'], unique=True)
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('audit_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('action', postgresql.ENUM('UPDATE', 'CREATE', 'DELETE', 'START_MATCH', 'ACTION_MATCH_EVENT', name='actionauditlogenum'), nullable=True),
    sa.Column('model', sa.String(length=100), nullable=True),
    sa.Column('created_datetime', sa.DateTime(), nullable=True),
    sa.Column('details', sa.String(length=1024), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('teams',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=150), nullable=True),
    sa.Column('short_name', sa.String(length=20), nullable=True),
    sa.Column('logo_url', sa.String(length=500), nullable=True),
    sa.Column('coach_id', sa.Integer(), nullable=True),
    sa.Column('created_datetime', sa.DateTime(), nullable=True),
    sa.Column('updated_datetime', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['coach_id'], ['coachs.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name'),
    sa.UniqueConstraint('short_name')
    )
    op.create_index(op.f('ix_teams_id'), 'teams', ['id'], unique=False)
    op.create_table('players',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('first_name', sa.String(length=150), nullable=True),
    sa.Column('last_name', sa.String(length=150), nullable=True),
    sa.Column('dni', sa.String(length=30), nullable=True),
    sa.Column('photo_url', sa.String(length=500), nullable=True),
    sa.Column('birth_date', sa.Date(), nullable=True),
    sa.Column('position', postgresql.ENUM('GK', 'FB', 'W', 'FW', 'P', name='playerpositionfutsalenum'), nullable=True),
    sa.Column('team_id', sa.Integer(), nullable=True),
    sa.Column('created_datetime', sa.DateTime(), nullable=True),
    sa.Column('updated_datetime', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['team_id'], ['teams.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_players_dni'), 'players', ['dni'], unique=True)
    op.create_index(op.f('ix_players_id'), 'players', ['id'], unique=False)
    op.create_table('tournaments',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=150), nullable=True),
    sa.Column('start_date', sa.Date(), nullable=True),
    sa.Column('end_date', sa.Date(), nullable=True),
    sa.Column('winner_team_id', sa.Integer(), nullable=True),
    sa.Column('created_datetime', sa.DateTime(), nullable=True),
    sa.Column('updated_datetime', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['winner_team_id'], ['teams.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_tournaments_id'), 'tournaments', ['id'], unique=False)
    op.create_table('awards',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('tournament_id', sa.Integer(), nullable=True),
    sa.Column('name', postgresql.ENUM('MVP', 'BEST_GOALKEEPER', 'TOP_SCORER', 'FAIR_PLAY', name='awardtypeenum'), nullable=True),
    sa.Column('description', sa.String(length=255), nullable=True),
    sa.ForeignKeyConstraint(['tournament_id'], ['tournaments.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_awards_id'), 'awards', ['id'], unique=False)
    op.create_table('groups',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('tournament_id', sa.Integer(), nullable=True),
    sa.Column('name', sa.String(length=50), nullable=True),
    sa.ForeignKeyConstraint(['tournament_id'], ['tournaments.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('playoffs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('tournament_id', sa.Integer(), nullable=True),
    sa.Column('round_name', postgresql.ENUM('ROUND_OF_32', 'ROUND_OF_16', 'QUARTER_FINALS', 'SEMI_FINALS', 'FINAL', name='typeplayoffenum'), nullable=True),
    sa.ForeignKeyConstraint(['tournament_id'], ['tournaments.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_playoffs_id'), 'playoffs', ['id'], unique=False)
    op.create_table('team_lineups',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('team_id', sa.Integer(), nullable=True),
    sa.Column('player_id', sa.Integer(), nullable=True),
    sa.Column('position', postgresql.ENUM('GK', 'FB', 'W', 'FW', 'P', name='playerpositionfutsalenum'), nullable=True),
    sa.Column('is_starter', sa.Boolean(), nullable=True),
    sa.Column('created_datetime', sa.DateTime(), nullable=True),
    sa.Column('updated_datetime', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['player_id'], ['players.id'], ),
    sa.ForeignKeyConstraint(['team_id'], ['teams.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('tournament_configs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('tournament_id', sa.Integer(), nullable=True),
    sa.Column('allow_draws', sa.Boolean(), nullable=True),
    sa.Column('points_win', sa.Integer(), nullable=True),
    sa.Column('points_draw', sa.Integer(), nullable=True),
    sa.Column('points_loss', sa.Integer(), nullable=True),
    sa.Column('tie_break_rule', postgresql.ENUM('GOAL_DIFFERENCE', 'HEAD_TO_HEAD', 'GOALS_SCORED', name='tiebreakruleenum'), nullable=True),
    sa.Column('group_size', sa.Integer(), nullable=True),
    sa.Column('advance_teams_per_group', sa.Integer(), nullable=True),
    sa.Column('created_datetime', sa.DateTime(), nullable=True),
    sa.Column('updated_datetime', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['tournament_id'], ['tournaments.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('tournament_standings',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('tournament_id', sa.Integer(), nullable=True),
    sa.Column('team_id', sa.Integer(), nullable=True),
    sa.Column('played', sa.Integer(), nullable=True),
    sa.Column('wins', sa.Integer(), nullable=True),
    sa.Column('draws', sa.Integer(), nullable=True),
    sa.Column('losses', sa.Integer(), nullable=True),
    sa.Column('goals_for', sa.Integer(), nullable=True),
    sa.Column('goals_againt', sa.Integer(), nullable=True),
    sa.Column('goal_difference', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['team_id'], ['teams.id'], ),
    sa.ForeignKeyConstraint(['tournament_id'], ['tournaments.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_tournament_standings_id'), 'tournament_standings', ['id'], unique=False)
    op.create_table('group_standings',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('group_id', sa.Integer(), nullable=True),
    sa.Column('team_id', sa.Integer(), nullable=True),
    sa.Column('points', sa.Integer(), nullable=True),
    sa.Column('played', sa.Integer(), nullable=True),
    sa.Column('wins', sa.Integer(), nullable=True),
    sa.Column('draws', sa.Integer(), nullable=True),
    sa.Column('losses', sa.Integer(), nullable=True),
    sa.Column('goals_for', sa.Integer(), nullable=True),
    sa.Column('goals_againt', sa.Integer(), nullable=True),
    sa.Column('goal_difference', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['group_id'], ['groups.id'], ),
    sa.ForeignKeyConstraint(['team_id'], ['teams.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_group_standings_id'), 'group_standings', ['id'], unique=False)
    op.create_table('matches',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('group_id', sa.Integer(), nullable=True),
    sa.Column('playoff_id', sa.Integer(), nullable=True),
    sa.Column('date', sa.Date(), nullable=True),
    sa.Column('home_team_id', sa.Integer(), nullable=True),
    sa.Column('away_team_id', sa.Integer(), nullable=True),
    sa.Column('home_team_score', sa.Integer(), nullable=True),
    sa.Column('away_team_score', sa.Integer(), nullable=True),
    sa.Column('status', postgresql.ENUM('PLANNED', 'ONGOING', 'FINISHED', name='statusmatchenum'), nullable=True),
    sa.Column('created_datetime', sa.DateTime(), nullable=True),
    sa.Column('updated_datetime', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['away_team_id'], ['teams.id'], ),
    sa.ForeignKeyConstraint(['group_id'], ['groups.id'], ),
    sa.ForeignKeyConstraint(['home_team_id'], ['teams.id'], ),
    sa.ForeignKeyConstraint(['playoff_id'], ['playoffs.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_matches_id'), 'matches', ['id'], unique=False)
    op.create_table('player_awards',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('player_id', sa.Integer(), nullable=True),
    sa.Column('award_id', sa.Integer(), nullable=True),
    sa.Column('date_awarded', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['award_id'], ['awards.id'], ),
    sa.ForeignKeyConstraint(['player_id'], ['players.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_player_awards_id'), 'player_awards', ['id'], unique=False)
    op.create_table('match_events',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('match_id', sa.Integer(), nullable=True),
    sa.Column('player_id', sa.Integer(), nullable=True),
    sa.Column('event_type', postgresql.ENUM('GOAL', 'ASSIST', 'YELLOW_CARD', 'RED_CARD', 'SUBSTITUTION_IN', 'SUBSTITUTION_OUT', name='matcheventypeenum'), nullable=True),
    sa.Column('minute', sa.Integer(), nullable=True),
    sa.Column('description', sa.String(length=255), nullable=True),
    sa.ForeignKeyConstraint(['match_id'], ['matches.id'], ),
    sa.ForeignKeyConstraint(['player_id'], ['players.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_match_events_id'), 'match_events', ['id'], unique=False)
    op.create_table('match_team_lineups',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('match_id', sa.Integer(), nullable=True),
    sa.Column('team_id', sa.Integer(), nullable=True),
    sa.Column('player_id', sa.Integer(), nullable=True),
    sa.Column('position', postgresql.ENUM('GK', 'FB', 'W', 'FW', 'P', name='playerpositionfutsalenum'), nullable=True),
    sa.Column('is_starter', sa.Boolean(), nullable=True),
    sa.Column('created_datetime', sa.DateTime(), nullable=True),
    sa.Column('updated_datetime', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['match_id'], ['matches.id'], ),
    sa.ForeignKeyConstraint(['player_id'], ['players.id'], ),
    sa.ForeignKeyConstraint(['team_id'], ['teams.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('player_stats',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('player_id', sa.Integer(), nullable=True),
    sa.Column('match_id', sa.Integer(), nullable=True),
    sa.Column('goals', sa.Integer(), nullable=True),
    sa.Column('assist', sa.Integer(), nullable=True),
    sa.Column('yellow_cards', sa.Integer(), nullable=True),
    sa.Column('red_cards', sa.Integer(), nullable=True),
    sa.Column('minutes_played', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['match_id'], ['matches.id'], ),
    sa.ForeignKeyConstraint(['player_id'], ['players.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('player_stats')
    op.drop_table('match_team_lineups')
    op.drop_index(op.f('ix_match_events_id'), table_name='match_events')
    op.drop_table('match_events')
    op.drop_index(op.f('ix_player_awards_id'), table_name='player_awards')
    op.drop_table('player_awards')
    op.drop_index(op.f('ix_matches_id'), table_name='matches')
    op.drop_table('matches')
    op.drop_index(op.f('ix_group_standings_id'), table_name='group_standings')
    op.drop_table('group_standings')
    op.drop_index(op.f('ix_tournament_standings_id'), table_name='tournament_standings')
    op.drop_table('tournament_standings')
    op.drop_table('tournament_configs')
    op.drop_table('team_lineups')
    op.drop_index(op.f('ix_playoffs_id'), table_name='playoffs')
    op.drop_table('playoffs')
    op.drop_table('groups')
    op.drop_index(op.f('ix_awards_id'), table_name='awards')
    op.drop_table('awards')
    op.drop_index(op.f('ix_tournaments_id'), table_name='tournaments')
    op.drop_table('tournaments')
    op.drop_index(op.f('ix_players_id'), table_name='players')
    op.drop_index(op.f('ix_players_dni'), table_name='players')
    op.drop_table('players')
    op.drop_index(op.f('ix_teams_id'), table_name='teams')
    op.drop_table('teams')
    op.drop_table('audit_logs')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_index(op.f('ix_users_dni'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_coachs_id'), table_name='coachs')
    op.drop_index(op.f('ix_coachs_dni'), table_name='coachs')
    op.drop_table('coachs')
    # ### end Alembic commands ###
